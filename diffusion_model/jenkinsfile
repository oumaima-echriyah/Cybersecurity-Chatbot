pipeline {
    agent any
    environment {
        DOCKERHUB_USERNAME = 'fassali'
        DOCKERHUB_PASSWORD = 'Ertdfgcvb2001/'
    }
    stages {
        stage('Prepare Environment') {
            steps {
                echo 'Setting up Git configurations...'
                sh '''
                    git config --global core.compression 0
                '''
            }
        }

        stage('Clone or Update Repository') {
            steps {
                echo 'Checking if repository exists...'
                sh '''
                    if [ ! -d "Cybersecurity-Chatbot" ]; then
                        echo Repository not found. Cloning...
                        git clone --depth 1 https://github.com/oumaima-echriyah/Cybersecurity-Chatbot.git
                    else
                        echo Repository found. Updating...
                        cd Cybersecurity-Chatbot
                        git pull --all
                    fi
                '''
            }
        }

        stage('Login to Docker Hub') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'hicham', usernameVariable: 'DOCKERHUB_USERNAME', passwordVariable: 'DOCKERHUB_PASSWORD')]) {
                        def loginCmd = "echo ${DOCKERHUB_PASSWORD} | /usr/local/bin/docker login -u ${DOCKERHUB_USERNAME} --password-stdin"
                        sh loginCmd
                    }
                }
            }
        }

        stage('Build Docker Image for flask') {
            steps {
                sh '''/usr/local/bin/docker build -t fassali/diffusion_model1:flask-app ./Cybersecurity-Chatbot/diffusion_model'''

            }
        }

        stage('Push flask Image to Hub') {
            steps {
                sh '''/usr/local/bin/docker push fassali/diffusion_model1:flask-app'''
            }
        }

        stage('Deploy flask to Kubernetes') {
            steps {
                script {
                    echo 'Checking Minikube Status...'
                    def minikubeStatus = sh(script: '/usr/local/bin/minikube status', returnStatus: true)
                    
                    echo 'Setting Minikube environment variables...'
                    sh '''
                        export DOCKER_TLS_VERIFY="1"
                        export DOCKER_HOST="tcp://127.0.0.1:60701"
                        export DOCKER_CERT_PATH="/Users/mac/.minikube/certs"
                        export MINIKUBE_ACTIVE_DOCKERD="minikube"
                        echo 'Deploying to Kubernetes...'
                        /usr/local/bin/kubectl apply -f Cybersecurity-Chatbot/diffusion model1/deployment.yaml
                        /usr/local/bin/kubectl apply -f Cybersecurity-Chatbot/diffusion model1/service.yaml
                    '''
                }
            }
        }
    }
    
    post {
        always {
            echo 'Pipeline execution completed.'
        }
    }
}
